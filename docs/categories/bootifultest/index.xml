<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bootifultest on # sudo init 5 - beta</title>
    <link>https://www.sudoinit5.com/categories/bootifultest/</link>
    <description>Recent content in Bootifultest on # sudo init 5 - beta</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Thu, 13 Sep 2018 00:00:00 -0400</lastBuildDate>
    
	<atom:link href="https://www.sudoinit5.com/categories/bootifultest/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Testing Reactive Apps with SpringBoot - The Consumer</title>
      <link>https://www.sudoinit5.com/post/spring-boot-testing-consumer/</link>
      <pubDate>Thu, 13 Sep 2018 00:00:00 -0400</pubDate>
      
      <guid>https://www.sudoinit5.com/post/spring-boot-testing-consumer/</guid>
      <description>The Producer/Consumer Duality (their exchange) In the producer side, we setup a service that will let us query a database of teams. This article will focus on the consumer side of the communication chain - namely how to extract tests out of situations where the comunication chain is asymetrical. We will then dive into Spring Cloud Contract to aleviate this issue and produce a working producer/consumer contract.
To start, we&amp;rsquo;ll need a data object for client state.</description>
    </item>
    
    <item>
      <title>Testing Reactive Cloud Apps with SpringBoot</title>
      <link>https://www.sudoinit5.com/post/spring-boot-testing-producer/</link>
      <pubDate>Thu, 13 Sep 2018 00:00:00 -0400</pubDate>
      
      <guid>https://www.sudoinit5.com/post/spring-boot-testing-producer/</guid>
      <description>The Producer Environment In the world of testing critical business funcationality, we dont need much inspiration to get the job done. However, when it comes to what to use, you may be left wandering whether you&amp;rsquo;ll hit all of the right frameworks and tools to validate your business code. Also likely, you&amp;rsquo;ll also need to figure out how to cross validate a producer app with a consumer app(s) that you may not even own!</description>
    </item>
    
  </channel>
</rss>