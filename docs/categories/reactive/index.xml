<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reactive on # sudo init 5 - A Developer&#39;s web log</title>
    <link>https://www.sudoinit5.com/categories/reactive/</link>
    <description>Recent content in Reactive on # sudo init 5 - A Developer&#39;s web log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sat, 14 Jul 2018 00:00:00 -0700</lastBuildDate>
    
	<atom:link href="https://www.sudoinit5.com/categories/reactive/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Setup and customize Authentication against a WebFlux Application</title>
      <link>https://www.sudoinit5.com/post/spring-reactive-authentication/</link>
      <pubDate>Sat, 14 Jul 2018 00:00:00 -0700</pubDate>
      
      <guid>https://www.sudoinit5.com/post/spring-reactive-authentication/</guid>
      <description>Configuring Authentication against a WebFlux app This demonstration examines Spring Security WebFlux&amp;rsquo;s Authentication mechanisms. We will look at Authentication request escalation, as well as user-domain customizations.
Authentication flow-control How do we determine when a request must provide an authentication context? Spring does this with help from an AuthenticationEntryPoint that identifies un-authenticated requests and returns with a response to the user to perform some authentication action.
Configure ServerHttpSecurity to use HTTP-BASIC by calling it&amp;rsquo;s httpBasic() method.</description>
    </item>
    
    <item>
      <title>Configuring Authorization with Reactive Spring Security 5</title>
      <link>https://www.sudoinit5.com/post/spring-reactive-authorization/</link>
      <pubDate>Thu, 05 Jul 2018 00:00:00 -0700</pubDate>
      
      <guid>https://www.sudoinit5.com/post/spring-reactive-authorization/</guid>
      <description>Configuring Authorization against a Webflux App Effective security can insulate our applications from ill effects of malicious, and accidental intent in many aspects of programming. Things like network security can only go so far in isolating harm to distributed computing applications. Prevent malicious hackers from gaining access to your systems by ensuring the tools meet the standards for your appcation.
Spring Security WebFlux is the framework that lets us declare security constructs to our ordinary WebFluxapplications.</description>
    </item>
    
    <item>
      <title>Spring Reactive WebSocket Hot Publisher</title>
      <link>https://www.sudoinit5.com/post/spring-reactive-ws-hot-server/</link>
      <pubDate>Wed, 09 May 2018 00:00:00 -0700</pubDate>
      
      <guid>https://www.sudoinit5.com/post/spring-reactive-ws-hot-server/</guid>
      <description>This Demo This is the multi-casting Flux variation of the standard WebSocket Service seen here
WebSocket Server Spring’s reactive [WebSocket] API is a part of Spring 5’s WebFlux API which bring reactive flow control to our projects via project reactor. We will introduce a single WebSocket handler, and show whats needed to get started using Spring’s WebSocketServer support.
You’ll want to start a new Spring project using start.spring.io[this link] to autogenerate a maven based POM.</description>
    </item>
    
    <item>
      <title>Spring Reactive WebSocket Cold Publisher</title>
      <link>https://www.sudoinit5.com/post/spring-reactive-ws-cold-server/</link>
      <pubDate>Tue, 08 May 2018 00:00:00 -0700</pubDate>
      
      <guid>https://www.sudoinit5.com/post/spring-reactive-ws-cold-server/</guid>
      <description>This Demo This demo will stand up Spring application service that exposes a WebSocket service through the Spring 5’s reactive WebSockets API. Typically, for inter-service comms, use a more traditional messaging system to deliver and expect events between services for example - messaging brokers such as Kafka, RabbitMq, etc.. WebSockets is an IETF standard and W3C API that provides a convenient way to issue and consume data streams across the Internet.</description>
    </item>
    
  </channel>
</rss>