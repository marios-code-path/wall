<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scala on # sudo init 5 - A Developer&#39;s web log</title>
    <link>https://www.sudoinit5.com/categories/scala/</link>
    <description>Recent content in Scala on # sudo init 5 - A Developer&#39;s web log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sat, 25 Aug 2018 00:00:00 -0700</lastBuildDate>
    
	<atom:link href="https://www.sudoinit5.com/categories/scala/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Getting started with Filters in Finagle</title>
      <link>https://www.sudoinit5.com/post/finagle-filters/</link>
      <pubDate>Sat, 25 Aug 2018 00:00:00 -0700</pubDate>
      
      <guid>https://www.sudoinit5.com/post/finagle-filters/</guid>
      <description>What is Finagle In this example, we will go through the steps to deploy a Filtered HTTP Service with Scala and SBT.
Finagle is an extensible RPC system for the JVM, that lets developers write non-blocking, high-concurrency services with ease. Much of what Finagle will let us do is summarized in the doc.
 Finagle implements uniform client and server APIs for several protocols, and is designed for high performance and concurrency.</description>
    </item>
    
    <item>
      <title>Intro to Finagle services with Scala and SBT.</title>
      <link>https://www.sudoinit5.com/post/finagle-intro/</link>
      <pubDate>Mon, 30 Jul 2018 00:00:00 -0700</pubDate>
      
      <guid>https://www.sudoinit5.com/post/finagle-intro/</guid>
      <description>What is Finagle Finagle is an extensible RPC system for the JVM, that lets developers write non-blocking, high-concurrency services with ease. Much of what Finagle will let us do is explained in the doc.
 Finagle implements uniform client and server APIs for several protocols, and is designed for high performance and concurrency. Most of Finagleâ€™s code is protocol agnostic, simplifying the implementation of new protocols.
 In this example, we will go through the steps to deploy a basic Finagle HTTP Service with Scala and SBT.</description>
    </item>
    
  </channel>
</rss>