<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Consumer on # sudo init 5 - beta</title>
    <link>https://www.sudoinit5.com/tags/consumer/</link>
    <description>Recent content in Consumer on # sudo init 5 - beta</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Thu, 13 Sep 2018 00:00:00 -0400</lastBuildDate>
    
	<atom:link href="https://www.sudoinit5.com/tags/consumer/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Testing Reactive Apps with SpringBoot - The Consumer</title>
      <link>https://www.sudoinit5.com/post/spring-boot-testing-consumer/</link>
      <pubDate>Thu, 13 Sep 2018 00:00:00 -0400</pubDate>
      
      <guid>https://www.sudoinit5.com/post/spring-boot-testing-consumer/</guid>
      <description>The Producer/Consumer exchange In the producer side, we setup a service that will let us query a database of teams. This article will focus on the consumer side of the communication chain - namely how to extract tests out of situations where the comunication chain is asymetrical. We will then dive into Spring Cloud Contract to aleviate this issue and produce a working producer/consumer contract.
To start, we&amp;rsquo;ll need a data object for client state.</description>
    </item>
    
  </channel>
</rss>