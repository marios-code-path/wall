<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Demo on # sudo init 5 - beta</title>
    <link>https://www.sudoinit5.com/tags/demo/</link>
    <description>Recent content in Demo on # sudo init 5 - beta</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Thu, 13 Sep 2018 00:00:00 -0700</lastBuildDate>
    
	<atom:link href="https://www.sudoinit5.com/tags/demo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Testing Reactive Cloud Apps with SpringBoot</title>
      <link>https://www.sudoinit5.com/post/spring-boot-testing-producer/</link>
      <pubDate>Thu, 13 Sep 2018 00:00:00 -0700</pubDate>
      
      <guid>https://www.sudoinit5.com/post/spring-boot-testing-producer/</guid>
      <description>The Producer Environment In the world of testing critical business funcationality, we dont need much inspiration to get the job done. However, when it comes to what to use, you may be left wandering whether you&amp;rsquo;ll hit all of the right frameworks and tools to validate your business code. Also likely, you&amp;rsquo;ll also need to figure out how to cross validate a producer app with a consumer app(s) that you may not even own!</description>
    </item>
    
    <item>
      <title>Server Flags with Twitter Finagle</title>
      <link>https://www.sudoinit5.com/post/finagle-flags/</link>
      <pubDate>Mon, 27 Aug 2018 00:00:00 -0700</pubDate>
      
      <guid>https://www.sudoinit5.com/post/finagle-flags/</guid>
      <description>This Example In this example, we setup and run an HTTP Service with Scala and SBT. We&amp;rsquo;ll cover the configuration of our services with the FinagleFlags API.
If this is your first time seeing Finagle, then I would suggest you take a look at the Finagle intro document which describes how to code and run a simple HTTP service.
Build with SBT This example, and others like it will rely on a quick and simple build tool.</description>
    </item>
    
    <item>
      <title>Getting started with Filters in Finagle</title>
      <link>https://www.sudoinit5.com/post/finagle-filters/</link>
      <pubDate>Sat, 25 Aug 2018 00:00:00 -0700</pubDate>
      
      <guid>https://www.sudoinit5.com/post/finagle-filters/</guid>
      <description>What is Finagle In this example, we will go through the steps to deploy a Filtered HTTP Service with Scala and SBT.
Finagle is an extensible RPC system for the JVM, that lets developers write non-blocking, high-concurrency services with ease. Much of what Finagle will let us do is summarized in the doc.
 Finagle implements uniform client and server APIs for several protocols, and is designed for high performance and concurrency.</description>
    </item>
    
    <item>
      <title>Intro to Finagle services with Scala and SBT.</title>
      <link>https://www.sudoinit5.com/post/finagle-intro/</link>
      <pubDate>Mon, 30 Jul 2018 00:00:00 -0700</pubDate>
      
      <guid>https://www.sudoinit5.com/post/finagle-intro/</guid>
      <description>What is Finagle Finagle is an extensible RPC system for the JVM, that lets developers write non-blocking, high-concurrency services with ease. Much of what Finagle will let us do is explained in the doc.
 Finagle implements uniform client and server APIs for several protocols, and is designed for high performance and concurrency. Most of Finagleâ€™s code is protocol agnostic, simplifying the implementation of new protocols.
 In this example, we will go through the steps to deploy a basic Finagle HTTP Service with Scala and SBT.</description>
    </item>
    
    <item>
      <title>Setup and Customize a Login Page With Reactive Spring Security.</title>
      <link>https://www.sudoinit5.com/post/spring-reactive-auth-forms/</link>
      <pubDate>Sat, 21 Jul 2018 00:00:00 -0700</pubDate>
      
      <guid>https://www.sudoinit5.com/post/spring-reactive-auth-forms/</guid>
      <description>Customized WebFlux Form Authentication This demonstration examines Spring Security WebFlux&amp;rsquo;s Authentication mechanisms. We will look at authentication with HTML forms using Mustache, User Authentication, and customized form-based login / logout configurations.
The ServerHttpSecurity Configuration SecurityWebFilterChain is the governing chain of [WebFilter]&amp;rsquo;s that allows us to lock down reactive WebFlux applications. With @EnableWebFluxSecurity turned on, we can build this object by issuing commands to the ServerHttpSecurity DSL object.
SecurityConfiguration.java:
@EnableWebFluxSecurity @Slf4j @Configuration public class SecurityConfiguration { @Bean public SecurityWebFilterChain securityWebFilterChain(ServerHttpSecurity http) { return http .</description>
    </item>
    
    <item>
      <title>Setup and customize Authentication against a WebFlux Application</title>
      <link>https://www.sudoinit5.com/post/spring-reactive-auth-basic/</link>
      <pubDate>Sat, 14 Jul 2018 00:00:00 -0700</pubDate>
      
      <guid>https://www.sudoinit5.com/post/spring-reactive-auth-basic/</guid>
      <description>Configuring Authentication against a WebFlux app This demonstration examines Spring Security WebFlux&amp;rsquo;s Authentication mechanisms. We will look at Authentication request escalation, as well as user-domain customizations.
Authentication flow-control How do we determine when a request must provide an authentication context? Spring does this with help from an AuthenticationEntryPoint that identifies un-authenticated requests and returns with a response to the user to perform some authentication action.
Configure ServerHttpSecurity to use HTTP-BASIC by calling it&amp;rsquo;s httpBasic() method.</description>
    </item>
    
    <item>
      <title>Configuring Authorization with Reactive Spring Security 5</title>
      <link>https://www.sudoinit5.com/post/spring-reactive-authorization/</link>
      <pubDate>Thu, 05 Jul 2018 00:00:00 -0700</pubDate>
      
      <guid>https://www.sudoinit5.com/post/spring-reactive-authorization/</guid>
      <description>Configuring Authorization against a Webflux App Effective security can insulate our applications from ill effects of malicious, and accidental intent in many aspects of programming. Things like network security can only go so far in isolating harm to distributed computing applications. Prevent malicious hackers from gaining access to your systems by ensuring the tools meet the standards for your appcation.
Spring Security WebFlux is the framework that lets us declare security constructs to our ordinary WebFluxapplications.</description>
    </item>
    
    <item>
      <title>Reactive Websocket Client with Spring</title>
      <link>https://www.sudoinit5.com/post/spring-reactive-ws-client/</link>
      <pubDate>Sun, 06 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.sudoinit5.com/post/spring-reactive-ws-client/</guid>
      <description>This Demo This demo client will connect and receive events from any URL that emits an open websocket stream. We have an existing server to stand up that can supply the socket events. A reactive client means that we can respond to backpressure, and weild the Observer pattern to our client connections.
The Client (SANS web) We can use our favorite Spring Application Initializr start dot spring dot io to generate the application.</description>
    </item>
    
    <item>
      <title>Sending and consuming messages with Spring and KafKa</title>
      <link>https://www.sudoinit5.com/post/spring-kafka/</link>
      <pubDate>Fri, 13 Apr 2018 00:00:00 -0700</pubDate>
      
      <guid>https://www.sudoinit5.com/post/spring-kafka/</guid>
      <description>Spring Kafka Writer and Readers What is Kafka Apache Kafka is an open-source stream-processing software platform developed by the Apache Software Foundation written in Scala and Java. You&amp;rsquo;ll find more information about Kafka at it&amp;rsquo;s Homepage.
Intro to Spring For Apache Kafka The Spring for Apache Kafka (spring-kafka) project applies core Spring concepts to the development of Kafka-based messaging solutions. It provides a &amp;ldquo;template&amp;rdquo; as a high-level abstraction for sending messages.</description>
    </item>
    
  </channel>
</rss>