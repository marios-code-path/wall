<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dependency Injection on # sudo init 5 - A Developer&#39;s web log</title>
    <link>https://www.sudoinit5.com/tags/dependency-injection/</link>
    <description>Recent content in Dependency Injection on # sudo init 5 - A Developer&#39;s web log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Fri, 07 Sep 2018 00:00:00 -0700</lastBuildDate>
    
	<atom:link href="https://www.sudoinit5.com/tags/dependency-injection/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Finagle Modules</title>
      <link>https://www.sudoinit5.com/post/finagle-modules/</link>
      <pubDate>Fri, 07 Sep 2018 00:00:00 -0700</pubDate>
      
      <guid>https://www.sudoinit5.com/post/finagle-modules/</guid>
      <description>Motivation Building applications by glueing resources together the manual way is daunting. Not impossible, but daunting. Lazy resource loading aka Dependency Injection (DI) can make your application more resilient to changes, and bring additional configurability to your project.
In this example, we will tackle managing server functionality using a few common twitter-module support guidelines.
The Service Lets define the meat of our sample which is a service that will answer our requests.</description>
    </item>
    
  </channel>
</rss>