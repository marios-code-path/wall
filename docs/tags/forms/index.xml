<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Forms on # sudo init 5 - A Developer&#39;s web log</title>
    <link>https://www.sudoinit5.com/tags/forms/</link>
    <description>Recent content in Forms on # sudo init 5 - A Developer&#39;s web log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sat, 21 Jul 2018 00:00:00 +0300</lastBuildDate>
    
	<atom:link href="https://www.sudoinit5.com/tags/forms/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Setup and Customize a Login Page With Reactive Spring Security.</title>
      <link>https://www.sudoinit5.com/post/spring-reactive-auth-forms/</link>
      <pubDate>Sat, 21 Jul 2018 00:00:00 +0300</pubDate>
      
      <guid>https://www.sudoinit5.com/post/spring-reactive-auth-forms/</guid>
      <description>Customized WebFlux Form Authentication This demonstration examines Spring Security WebFlux&amp;rsquo;s Authentication mechanisms. We will look at authentication with HTML forms using Mustache, User Authentication, and customized form-based login / logout configurations.
The ServerHttpSecurity Configuration SecurityWebFilterChain is the governing chain of [WebFilter]&amp;rsquo;s that allows us to lock down reactive WebFlux applications. With @EnableWebFluxSecurity turned on, we can build this object by issuing commands to the ServerHttpSecurity DSL object.
SecurityConfiguration.java:
@EnableWebFluxSecurity @Slf4j @Configuration public class SecurityConfiguration { @Bean public SecurityWebFilterChain securityWebFilterChain(ServerHttpSecurity http) { return http .</description>
    </item>
    
  </channel>
</rss>