<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reactive on # sudo init 5 - beta</title>
    <link>https://www.sudoinit5.com/tags/reactive/</link>
    <description>Recent content in Reactive on # sudo init 5 - beta</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Thu, 13 Sep 2018 00:00:00 -0400</lastBuildDate>
    
	<atom:link href="https://www.sudoinit5.com/tags/reactive/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Testing Reactive Apps with SpringBoot</title>
      <link>https://www.sudoinit5.com/post/spring-boot-testing-producer/</link>
      <pubDate>Thu, 13 Sep 2018 00:00:00 -0400</pubDate>
      
      <guid>https://www.sudoinit5.com/post/spring-boot-testing-producer/</guid>
      <description>The Producer Environment In the world of testing critical business funcationality, we dont need much inspiration to get the job done. However, when it comes to what to use, you may be left wandering whether you&amp;rsquo;ll hit all of the right frameworks and tools to validate your business code. Also likely, you&amp;rsquo;ll also need to figure out how to cross validate a producer app with a consumer app(s) that you may not even own!</description>
    </item>
    
    <item>
      <title>Testing Reactive Apps with SpringBoot - The Consumer</title>
      <link>https://www.sudoinit5.com/post/spring-boot-testing-consumer/</link>
      <pubDate>Thu, 13 Sep 2018 00:00:00 -0400</pubDate>
      
      <guid>https://www.sudoinit5.com/post/spring-boot-testing-consumer/</guid>
      <description>The Producer/Consumer Duality (their exchange) In the producer side, we setup a service that will let us query a database of teams. This article will focus on the consumer side of the communication chain - namely how to extract tests out of situations where the comunication chain is asymetrical. We will then dive into Spring Cloud Contract to aleviate this issue and produce a working producer/consumer contract.
To start, we&amp;rsquo;ll need a data object for client state.</description>
    </item>
    
    <item>
      <title>Spring Reactive WebSocket Hot Publisher</title>
      <link>https://www.sudoinit5.com/post/spring-reactive-ws-hot-server/</link>
      <pubDate>Wed, 09 May 2018 00:00:00 -0400</pubDate>
      
      <guid>https://www.sudoinit5.com/post/spring-reactive-ws-hot-server/</guid>
      <description>This Demo This is the multi-casting Flux variation of the standard WebSocket Service seen here
WebSocket Server Spring’s reactive [WebSocket] API is a part of Spring 5’s WebFlux API which bring reactive flow control to our projects via project reactor. We will introduce a single WebSocket handler, and show whats needed to get started using Spring’s WebSocketServer support.
You’ll want to start a new Spring project using start.spring.io[this link] to autogenerate a maven based POM.</description>
    </item>
    
    <item>
      <title>Spring Reactive WebSocket Cold Publisher</title>
      <link>https://www.sudoinit5.com/post/spring-reactive-ws-cold-server/</link>
      <pubDate>Tue, 08 May 2018 00:00:00 -0400</pubDate>
      
      <guid>https://www.sudoinit5.com/post/spring-reactive-ws-cold-server/</guid>
      <description>This Demo This demo will stand up Spring application service that exposes a WebSocket service through the Spring 5’s reactive WebSockets API. Typically, for inter-service comms, use a more traditional messaging system to deliver and expect events between services for example - messaging brokers such as Kafka, RabbitMq, etc.. WebSockets is an IETF standard and W3C API that provides a convenient way to issue and consume data streams across the Internet.</description>
    </item>
    
  </channel>
</rss>