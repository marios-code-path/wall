<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web on # sudo init 5 - beta</title>
    <link>https://www.sudoinit5.com/tags/web/</link>
    <description>Recent content in Web on # sudo init 5 - beta</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Thu, 13 Sep 2018 00:00:00 -0400</lastBuildDate>
    
	<atom:link href="https://www.sudoinit5.com/tags/web/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Testing Reactive Apps with SpringBoot</title>
      <link>https://www.sudoinit5.com/post/spring-boot-testing-producer/</link>
      <pubDate>Thu, 13 Sep 2018 00:00:00 -0400</pubDate>
      
      <guid>https://www.sudoinit5.com/post/spring-boot-testing-producer/</guid>
      <description>The Producer Environment In the world of testing critical business funcationality, we dont need much inspiration to get the job done. However, when it comes to what to use, you may be left wandering whether you&amp;rsquo;ll hit all of the right frameworks and tools to validate your business code. Also likely, you&amp;rsquo;ll also need to figure out how to cross validate a producer app with a consumer app(s) that you may not even own!</description>
    </item>
    
    <item>
      <title>Testing Reactive Apps with SpringBoot - The Consumer</title>
      <link>https://www.sudoinit5.com/post/spring-boot-testing-consumer/</link>
      <pubDate>Thu, 13 Sep 2018 00:00:00 -0400</pubDate>
      
      <guid>https://www.sudoinit5.com/post/spring-boot-testing-consumer/</guid>
      <description>The Producer/Consumer Duality (their exchange) In the producer side, we setup a service that will let us query a database of teams. This article will focus on the consumer side of the communication chain - namely how to extract tests out of situations where the comunication chain is asymetrical. We will then dive into Spring Cloud Contract to aleviate this issue and produce a working producer/consumer contract.
To start, we&amp;rsquo;ll need a data object for client state.</description>
    </item>
    
    <item>
      <title>Setup and Customize a Login Page With Reactive Spring Security.</title>
      <link>https://www.sudoinit5.com/post/spring-reactive-auth-forms/</link>
      <pubDate>Sat, 21 Jul 2018 00:00:00 -0400</pubDate>
      
      <guid>https://www.sudoinit5.com/post/spring-reactive-auth-forms/</guid>
      <description>Customized WebFlux Form Authentication This demonstration examines Spring Security WebFlux&amp;rsquo;s Authentication mechanisms. We will look at authentication with HTML forms using Mustache, User Authentication, and customized form-based login / logout configurations.
The ServerHttpSecurity Configuration SecurityWebFilterChain is the governing chain of [WebFilter]&amp;rsquo;s that allows us to lock down reactive WebFlux applications. With @EnableWebFluxSecurity turned on, we can build this object by issuing commands to the ServerHttpSecurity DSL object.
SecurityConfiguration.java:
@EnableWebFluxSecurity @Slf4j @Configuration public class SecurityConfiguration { @Bean public SecurityWebFilterChain securityWebFilterChain(ServerHttpSecurity http) { return http .</description>
    </item>
    
    <item>
      <title>Setup and customize Authentication against a WebFlux Application</title>
      <link>https://www.sudoinit5.com/post/spring-reactive-auth-basic/</link>
      <pubDate>Sat, 14 Jul 2018 00:00:00 -0400</pubDate>
      
      <guid>https://www.sudoinit5.com/post/spring-reactive-auth-basic/</guid>
      <description>Configuring Authentication against a WebFlux app This demonstration examines Spring Security WebFlux&amp;rsquo;s Authentication mechanisms. We will look at Authentication request escalation, as well as user-domain customizations.
Authentication flow-control How do we determine when a request must provide an authentication context? Spring does this with help from an AuthenticationEntryPoint that identifies un-authenticated requests and returns with a response to the user to perform some authentication action.
Configure ServerHttpSecurity to use HTTP-BASIC by calling it&amp;rsquo;s httpBasic() method.</description>
    </item>
    
    <item>
      <title>Sending and consuming messages with Spring and KafKa</title>
      <link>https://www.sudoinit5.com/post/spring-kafka/</link>
      <pubDate>Fri, 13 Apr 2018 00:00:00 -0400</pubDate>
      
      <guid>https://www.sudoinit5.com/post/spring-kafka/</guid>
      <description>Spring Kafka Writer and Readers What is Kafka Apache Kafka is an open-source stream-processing software platform developed by the Apache Software Foundation written in Scala and Java. You&amp;rsquo;ll find more information about Kafka at it&amp;rsquo;s Homepage.
Intro to Spring For Apache Kafka The Spring for Apache Kafka (spring-kafka) project applies core Spring concepts to the development of Kafka-based messaging solutions. It provides a &amp;ldquo;template&amp;rdquo; as a high-level abstraction for sending messages.</description>
    </item>
    
  </channel>
</rss>